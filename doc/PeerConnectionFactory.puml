@startuml PeerConnectionFactory

interface PeerConnectionFactoryInterface 
{
    {method} PeerConnectionInterface CreatePeerConnection(RTCConfiguration, PeerConnectionDependencies)
    {method} RtpCapabilities GetRtpReceiverCapabilities( cricket::MediaType kind)
    {method} rtc::scoped_refptr<MediaStreamInterface> CreateLocalMediaStream(const std::string& stream_id)
    {method} rtc::scoped_refptr<AudioSourceInterface> CreateAudioSource( const cricket::AudioOptions& options)
    {method} rtc::scoped_refptr<VideoTrackInterface> CreateVideoTrack(VideoTrackSourceInterface source,label)
    {method} rtc::scoped_refptr<AudioTrackInterface> CreateAudioTrack( label, AudioSourceInterface* source)
}

class RTCConfiguration
{
    IceServers servers
    IceTransportsType type
    ...
}

class PeerConnectionDependencies
{
    PeerConnectionObserver* observer
    PortAllocator allocator
    ' AsyncDnsResolverFactoryInterface async_dns_resolver_factory
    IceTransportFactory ice_transport_factory
    RTCCertificateGeneratorInterface cert_generator
    SSLCertificateVerifier tls_cert_verifier
    ...
}

class PeerConnectionFactoryDependencies
{
  rtc::PacketSocketFactory packet_socket_factory
  TaskQueueFactory task_queue_factory
  cricket::MediaEngineInterface media_engine
  CallFactoryInterface call_factory
  RtcEventLogFactoryInterface event_log_factory
  FecControllerFactoryInterface fec_controller_factory
'   NetworkStatePredictorFactoryInterface network_state_predictor_factory
  NetworkControllerFactoryInterface network_controller_factory
}

class Thread << rtc >>
{

}

class PeerConnectionFactory
{

}

class ConnectionContext
{
  SctpTransportFactoryInterface* sctp_transport_factory()
  cricket::MediaEngineInterface* media_engine()
'   rtc::Thread* signaling_thread()
'   rtc::Thread* worker_thread()
'   rtc::Thread* network_thread()
  const FieldTrialsView& field_trials()
  rtc::NetworkManager* default_network_manager()
  rtc::PacketSocketFactory* default_socket_factory() 
  CallFactoryInterface* call_factory()
  rtc::UniqueRandomIdGenerator* ssrc_generator()
}

PeerConnectionFactoryInterface <|-- PeerConnectionFactory

PeerConnectionFactory -> ConnectionContext : context_

PeerConnectionFactoryDependencies --> Thread : signaling_thread
PeerConnectionFactoryDependencies --> Thread : worker_thread
PeerConnectionFactoryDependencies --> Thread : network_thread
SocketFactory <-- PeerConnectionFactoryDependencies : socket_factory

PeerConnectionDependencies <.. PeerConnectionFactoryInterface
PeerConnectionFactoryDependencies <.. PeerConnectionFactoryInterface
RTCConfiguration <.. PeerConnectionFactoryInterface

Thread <-- ConnectionContext : signaling_thread
Thread <-- ConnectionContext : worker_thread
Thread <-- ConnectionContext : network_thread

@enduml